defmodule Frac5 do
  @moduledoc """

  `Frac5` is a modular library for generating fractals based on
  iterative transformations of points in a 5-dimensional space, where
  the five dimensions can be thought of as `(x, y, r, g, b)`.  `Frac5`
  depends on `Nx` (and an `Nx` backend library of the users' choice)
  to compute transformations on hardware efficiently. The parent
  module `Frac5` only provides an example function for generating
  one form of the fractals, leaving up to the imagination of the
  user of the library the choice of what other forms to create.

  `Frac5.Affine` handles linear transformations of points, by matrix
  multiplication, and defines a function to compute a lazy infinite
  stream of such transformations, optionally interleaved with other
  transformations chosen by the programmer.

  `Frac5.Transforms` defines some helpful non-linear transformations
  as examples, and provides a function which accepts a stream of
  transformations, such as generated by `Frac5.Affine`, an initial
  vector of points, and a list of other transforms to be applied "in
  parallel", and transforms the stream of transformations into a
  stream of vectors of points.

  `Frac5.Pixels` provides a function `pixelate` which accepts a stream
  of vectors of 5-dimenaional points, such as those generated by
  `Frac5.Transforms`, and reduces a specified number of them to
  generate a grid of pixels, suitable for rendering to a color image
  file.

  `Frac5.Pnm` provides functions for writing and reading grids of
  pixels, either color or grayscale, to or from compressed NetPBM
  `.pgm.gz` or `.ppm.gz` files, chosen because the uncompressed form
  is maximally simple to read and write (N.B. the module only supports
  the one-byte-per-channel binary format). ImageMagick or NetPBM
  software can be used to translate between these files and more
  standard formats.

  """

  @doc """
  Writes a sample image at a `path` chosen by the caller, using
  randomly generated matrices and a random `zcolor` vector.
  """
  def example_image(path, batches \\ 100) do
    scale = 0.5 + 0.3 * :rand.uniform()
    IO.inspect(scale)
    {affine_stream, init_points} = Frac5.Affine.generate_stream_init(3, scale)
    zcolor = Frac5.Pixels.rand_unit_vec(3)
    IO.inspect(Nx.to_list(zcolor))

    grid =
      Frac5.Transforms.points_stream(
        affine_stream,
        init_points,
        Frac5.Transforms.default_parallels()
      )
      |> Frac5.Pixels.pixelate(zcolor, batches)

    Frac5.Pnm.render_gz!(grid, path) |> IO.inspect()
  end
end
